                    await DisplayAlert("Onnistui", "Mökki lisätty tietokantaan.", "OK");
                }
            }
            catch (FormatException fe)
            {
                // Ilmoita käyttäjälle virheellisestä syötteestä
                await DisplayAlert("Syötevirhe", "Tarkista, että kaikki kentät on täytetty oikein ja että numerokentissä on vain numeroita.", "OK");
            }
            catch (Exception ex)
            {
                // Käsittely yleiselle poikkeukselle
                await DisplayAlert("Virhe", $"Tietojen lisäyksessä tapahtui virhe: {ex.Message}", "OK");
            }
        }
    }

    public class DatabaseAccess
    {
        public async Task<bool> LisaaMokkiTietokantaan(Mokki uusiMokki)
        {
            // Tässä käytetään esimerkkinä kovakoodattuja yhteystietoja.
            // Tuotantokäytössä yhteystiedot tulisi ladata turvallisemmasta lähteestä kuten ympäristömuuttujista tai konfiguraatiotiedostosta.
            string connectionString = "server=your_server;port=3306;database=your_database;user=your_username;password=your_password";

            using (var connection = new MySqlConnection(connectionString))
            {
                try
                {
                    await connection.OpenAsync();

                    var query = "INSERT INTO mokki (mokkinimi, katuosoite, postinro, hinta, henkilomaara, kuvaus, varustelu) VALUES (@Mokkinimi, @Katuosoite, @Postinro, @Hinta, @Henkilomaara, @Kuvaus, @Varustelu)";

                    using (var command = new MySqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Mokkinimi", uusiMokki.Mokkinimi);
                        command.Parameters.AddWithValue("@Katuosoite", uusiMokki.Katuosoite);
                        command.Parameters.AddWithValue("@Postinro", uusiMokki.Postinro);
                        command.Parameters.AddWithValue("@Hinta", uusiMokki.Hinta);
                        command.Parameters.AddWithValue("@Henkilomaara", uusiMokki.Henkilomaara);
                        command.Parameters.AddWithValue("@Kuvaus", uusiMokki.Kuvaus);
                        command.Parameters.AddWithValue("@Varustelu", uusiMokki.Varustelu);

                        int result = await command.ExecuteNonQueryAsync();
                        return result > 0;
                    }
                }
                catch (Exception ex)
                {
                    // Käsittely mahdollisille poikkeuksille, kirjaa tämä järjestelmän lokitiedostoon tai käyttöliittymään
                    Debug.WriteLine($"Virhe tietokantaan tallennettaessa: {ex.Message}");
                    return false;
                }
            }
        }
    }

    public class Mokki
    {
        // Oleta että tässä on kaikki Mokki-luokan tarvittavat propertyt.
        // Varmista, että nämä propertyt vastaavat tietokantasi sarakkeiden nimiä ja tietotyyppejä.
        public string Mokkinimi { get; set; }
        public string Katuosoite { get; set; }
        public int Postinro { get; set; }
        public double Hinta { get; set; }
        public int Henkilomaara { get; set; }
        public string Kuvaus { get; set; }
        public string Varustelu { get; set; }
    }
}
