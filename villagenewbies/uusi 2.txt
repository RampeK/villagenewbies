public partial class AddCabin : ContentPage
{
	public AddCabin()
	{
		InitializeComponent();
	}

    // asiakkaan vienti tietokantaan
    private async void LisaaMokki_Clicked(object sender, EventArgs e)
    {
        // jos kentät tyhjät ja yritetään tallentaa
        if 
       (string.IsNullOrWhiteSpace(mokkinimi.Text) ||
        string.IsNullOrWhiteSpace(katuosoite.Text) ||
        string.IsNullOrWhiteSpace(postinro.Text) ||
        string.IsNullOrWhiteSpace(hinta.Text) ||
        string.IsNullOrWhiteSpace(henkilomaara.Text) ||
        string.IsNullOrWhiteSpace(kuvaus.Text) ||
        string.IsNullOrWhiteSpace(varustelu.Text))
        {
            // Näytä varoitusikkuna
            await DisplayAlert("Täyttämättömät tiedot", "Täytä kaikki asiakastiedot ennen lähettämistä.", "OK");
            return; // Lopeta metodin suoritus tähän
        }

        int parsedPostinro;
        double parsedHinta;
        int parsedHenkilomaara;

        bool postinroIsValid = int.TryParse(postinro.Text, out parsedPostinro);
        bool hintaIsValid = double.TryParse(hinta.Text, out parsedHinta);
        bool henkilomaaraIsValid = int.TryParse(henkilomaara.Text, out parsedHenkilomaara);

        if (postinroIsValid && hintaIsValid && henkilomaaraIsValid)
        {
            var uusiMokki = new Mokki
            {
                mokkinimi = mokkinimi.Text,
                katuosoite = katuosoite.Text,
                postinro = parsedPostinro,   // Olettaen, että postinro on int tietokannassa
                hinta = parsedHinta,          // Olettaen, että hinta on decimal tietokannassa
                henkilomaara = parsedHenkilomaara,
                kuvaus = kuvaus.Text, 
                varustelu = varustelu.Text// Olettaen, että henkilomaara on int tietokannassa
            };


            var databaseAccess = new DatabaseAccess();
            await databaseAccess.LisaaMokkiTietokantaan(uusiMokki);
        }



        // lisää tähän: palaa edelliselle sivulle tai anna käyttäjälle palaute onnistuneesta lisäyksestä

        mokkinimi.Text = "";
        katuosoite.Text = "";
        postinro.Text = "";
        toimipaikka.Text = "";
        hinta.Text = "";
        henkilomaara.Text = "";
        kuvaus.Text = "";
        varustelu.Text = "";
        
    }



    public class DatabaseAccess
    {
        public async Task LisaaMokkiTietokantaan(Mokki uusiMokki)
        {
            string projectDirectory = System.AppDomain.CurrentDomain.BaseDirectory;
            var projectRoot = Path.GetFullPath(Path.Combine(projectDirectory, @"..\..\..\..\..\"));

            DotNetEnv.Env.Load(projectRoot);
            var env = Environment.GetEnvironmentVariables();

            string connectionString = $"server={env["SERVER"]};port={env["SERVER_PORT"]};database={env["SERVER_DATABASE"]};user={env["SERVER_USER"]};password={env["SERVER_PASSWORD"]}";
            using (var connection = new MySqlConnection(connectionString))
            {
                try
                {
                    await connection.OpenAsync();

                    var query = "INSERT INTO Mokki (postinro, mokkinimi, katuosoite, hinta, henkilomaara, kuvaus, varustelu) VALUES (@Postinro, @Mokkinimi, @Katuosoite, @Hinta, @Henkilomaara, @Kuvaus, @Varustelu)";

                    using (var command = new MySqlCommand(query, connection))
                    {
                        Debug.WriteLine(uusiMokki.postinro);
                        command.Parameters.AddWithValue("@Postinro", uusiMokki.postinro);
                        command.Parameters.AddWithValue("@Katuosoite", uusiMokki.katuosoite);
                        command.Parameters.AddWithValue("@Hinta", uusiMokki.hinta);
                        command.Parameters.AddWithValue("@Mokkinimi", uusiMokki.mokkinimi);
                        command.Parameters.AddWithValue("@Henkilomaara", uusiMokki.henkilomaara);
                        command.Parameters.AddWithValue("@Kuvaus", uusiMokki.kuvaus);
                        command.Parameters.AddWithValue("@Varustelu", uusiMokki.varustelu);

                        await command.ExecuteNonQueryAsync();
                    }   return result > 0;





                }
                catch (Exception ex)
                {
                    // Käsittely mahdollisille poikkeuksille
                    Debug.WriteLine(ex.Message);
                }
            }
        }
    }
}

    
